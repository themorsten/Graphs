# https://informatics.msk.ru/mod/statements/view.php?chapterid=164#1
# Дан неориентированный невзвешенный граф. Для него вам необходимо найти количество вершин,
# лежащих в одной компоненте связности с данной вершиной (считая эту вершину).

# Входные данные
# В первой строке входных данных содержатся два числа: N и S (1 ≤ N ≤ 100; 1 ≤ S ≤ N), 
# где N – количество вершин графа, а S – заданная вершина. В следующих N строках записано по N чисел
# – матрица смежности графа, в которой 0 означает отсутствие ребра между вершинами,
# а 1 – его наличие. Гарантируется, что на главной диагонали матрицы всегда стоят нули.

# Выходные данные
# Выведите одно целое число – искомое количество вершин.

# N,S = map(int, input().split())

# MS = [[] for i in range(N)]
# for i in range(N):
#   MS[i] = [int(el) for el in input().split()]


def DFS(s, G, vis):           # s - стартовая вершина, G - списки смежности, vis - массив посещенных вершин
  vis[s] = 1
  for v in G[s]:              # каждая вершина, смежная с s
    if not vis[v]:
      DFS(v, G, vis)


N, S = 3,1                    # N - количество вершин, s - стартовая вершина
MS = [[0,1,1],                # MS - матрица смежности 
      [1,0,0],
      [1,0,0]]

G = [[] for i in range(N)]    # GS - списки смежности
vis = [0 for i in range(N)]   # vis = список посещенных вершин

for i in range(N):            # составляем список смежности из матрицы смежности
  for j in range(N):
    if MS[i][j]: G[i].append(j)


DFS(S,G,vis)

cnt = 0
for i in range(N):
  if vis[i]: cnt+=1

print(cnt)
